Лаба 1:
git init - создание репозитория
git add . - индексация("." - все файлы, которые не закомичены, заместо "." можно писать конкретный файл)
git commit -m "comment"
git log - отображает историю коммитов в репозитории
ls -a -какие файлы сохранены
git status - статус файлов, закомичены или нет


Лаба 2:
mkdir directory_name
touch filename
nano filename - переход в тектовый редактор
Ctrl + X - выход из текстового редактора -> Y -> Enter
rm - r directoryname - удаление директории
rm filename - удаление файла

git config --global core.autocrlf input - чтобы он сохранял файлы с LF вместо CRLF в системах Windows
LF (Line Feed): Этот символ, также известный как '\n'
CRLF (Carriage Return + Line Feed): Эта комбинация символов, известная как '\r\n'
Enter - '\n'
Shift+enter - '\r\n'


git diff - посмотреть индексированные и неиндексированные изменения



Лаба 3:
git log - просмотр действий произведённых с репозиторием
У команды выше можно ставить доп. параметры:
1) -p (показывает дельту(разницу/diff), привнесенную каждым коммитом
2) -2 (ограничение на вывод двух записей)
3) --since=(...) - указывает на вывод коммитов сделанных в течение последнего месяца (--since="1 month ago")
4) --format="..." - задает формат вывода для каждого коммита (%h - сокращенный хеш коммита, %ad - дата коммита, %s - комментарий коммита)
5) --date=short - указывает Git выводить дату в коротком формате
6) --reverse - используется для вывода коммитов в обратном порядке(хронологическом)
Т.е пишем git log -p



Лаба 4:
git commit -amend -Эта команда берёт индекс и использует его для коммита. Если после последнего 
коммита не было никаких изменений (например, приведенная команда была запущена сразу 
после предыдущего коммита), то состояние проекта будет абсолютно таким же и всё, что 
изменится, это комментарий к коммиту.
1) touch filename
2) git reset --hard <хэш_первого_коммита> - Эта команда откатит вашу ветку к состоянию, соответствующему выбранному коммиту, и удалит все последующие коммиты, включая изменения, которые вы сделали в них.Эта команда откатит вашу ветку к состоянию, соответствующему выбранному коммиту, 
и удалит все последующие коммиты, включая изменения, которые вы сделали в них. Но они останутся в репозитории
3) git gc - Для того чтобы удалить из репозитория то что находится в сборщике мусора, после команды выше пишем 